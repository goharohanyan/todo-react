{"version":3,"sources":["components/ListItem.js","components/ListItems.js","components/ToDoHeader.js","components/FilterButtons.js","components/Search.js","components/Main.js","App.js","serviceWorker.js","index.js"],"names":["GreenCheckbox","withStyles","root","color","green","checked","props","Checkbox","divStyle","fontSize","display","justifyContent","alignItems","marginTop","padding","ListItem","className","toDo","done","style","onChange","onCheckboxChange","id","name","IconButton","aria-label","onClick","onBtnRemove","ListItems","width","toDoItems","map","el","key","Box","border","margin","CssTextField","borderBottomColor","borderColor","TextField","headerStyle","flexDirection","inputAreaStyle","ToDoHeader","Typography","variant","type","styl","label","value","inputValue","onInputChange","onKeyPress","event","onEnterPress","Button","onBtnClick","FilterButtons","onAllBtnClick","onActiveBtnClick","onCompletedBtnClick","CustomTextField","Search","onSearch","wrapperDivStyle","height","Main","useState","setInputValue","isFilteredBy","setIsFilteredBy","searchKey","setSearchKey","setToDoItems","addNewItem","newTodosList","push","uniqueId","target","onDelete","filter","includes","arr","splice","findIndex","currentToDo","find","currentToDoIndex","indexOf","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.febb27e5.chunk.js","sourcesContent":["import React from \"react\";\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport { IconButton, Checkbox } from '@material-ui/core';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport { green } from '@material-ui/core/colors'\r\n\r\n\r\nconst GreenCheckbox = withStyles({\r\n    root: {\r\n      color: '272C34',\r\n      '&$checked': {\r\n        color: green[600],\r\n      },\r\n    },\r\n    checked: {},\r\n  })((props) => <Checkbox color=\"default\" {...props} />);\r\n\r\nconst divStyle = {\r\n    fontSize: 20,\r\n    display: 'flex',\r\n    justifyContent: 'space-between',\r\n    alignItems: 'center',\r\n    marginTop: 5,\r\n    padding: '5px 10px',\r\n};\r\n\r\nfunction ListItem(props) {\r\n\r\n    let checked = \"checked\";\r\n    return (<div className={props.toDo.done ? checked : \"\"} style={divStyle}>\r\n        <GreenCheckbox checked={props.toDo.done} onChange={() => {\r\n            props.onCheckboxChange(props.toDo.id)\r\n        }} />\r\n        {props.toDo.name}\r\n        <IconButton aria-label=\"delete\" onClick={() => props.onBtnRemove(props.toDo.id)}>\r\n                <DeleteIcon />\r\n        </IconButton> \r\n    </div>)\r\n\r\n}\r\n\r\nexport default ListItem;\r\n","import React from \"react\";\r\nimport ListItem from \"./ListItem\";\r\nimport { Box } from \"@material-ui/core\";\r\n\r\nexport default function ListItems(props) {\r\n    \r\n    return (<div style={{width:'100%'}}>{props.toDoItems.map(el => \r\n        <ListItem key={el.id} onBtnRemove={props.onBtnRemove} toDo={el}\r\n        onCheckboxChange={props.onCheckboxChange}/>)}\r\n        <Box border={1.5} margin='2%' color=\"#43A047\" /> </div>)\r\n\r\n}\r\n","import React from \"react\";\r\nimport { Button, Typography } from '@material-ui/core';\r\nimport { TextField } from '@material-ui/core';\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\n\r\nconst CssTextField = withStyles({\r\n    root: {\r\n      '& label.Mui-focused': {\r\n        color: '#43A047',\r\n      },\r\n      '& .MuiInput-underline:after': {\r\n        borderBottomColor: '#707070',\r\n      },\r\n      '& .MuiOutlinedInput-root': {\r\n        '& fieldset': {\r\n          borderColor: '#707070',\r\n        },\r\n        '&:hover fieldset': {\r\n          borderColor: '#707070',\r\n        },\r\n        '&.Mui-focused fieldset': {\r\n          borderColor: '#707070',\r\n        },\r\n      },\r\n    },\r\n  })(TextField);\r\n\r\nconst headerStyle = {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n    marginTop: '10%'\r\n\r\n};\r\n\r\nconst inputAreaStyle = {\r\n    display: 'flex',\r\n    flexDirection: 'row',\r\n    justifyContent: 'space-between',\r\n    marginTop: '2%'\r\n\r\n};\r\n\r\nfunction ToDoHeader(props) {\r\n    \r\n    return (<div style={headerStyle}>\r\n                <Typography variant='h3' > My todo list</Typography>\r\n                <div style={inputAreaStyle}>\r\n                    <CssTextField type='text' variant='outlined' styl={{borderColor: 'green'}} label='What shoud I do...' value={props.inputValue} \r\n                                onChange={props.onInputChange} onKeyPress={(event) => {\r\n                                                                    if(event.key === 'Enter'){\r\n                                                                        props.onEnterPress()\r\n                                                                    }    \r\n                                                                }}  />\r\n                    \r\n                    <Button onClick={props.onBtnClick} >Add</Button>\r\n            </div>       \r\n        </div>)\r\n    \r\n}\r\n\r\nexport default ToDoHeader;\r\n\r\n","import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\n\r\n\r\nexport default function FilterButtons(props) {\r\n\r\n    return (\r\n        <div>\r\n            <Button  color=\"default\" onClick={props.onAllBtnClick}>All</Button>                \r\n            <Button  color=\"default\" onClick={props.onActiveBtnClick}>Active</Button>\r\n            <Button  color=\"default\" onClick={props.onCompletedBtnClick}>Completed</Button>\r\n        </div>\r\n    )\r\n\r\n}\r\n","import React from'react';\r\nimport { TextField } from '@material-ui/core';\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\nconst CustomTextField = withStyles({\r\n  root: {\r\n    '& label.Mui-focused': {\r\n      color: '#43A047',\r\n    },\r\n    '& .MuiInput-underline:after': {\r\n      borderBottomColor: '#707070',\r\n    },\r\n  }})(TextField);\r\n\r\n\r\nfunction Search(props) {\r\n\r\n    return (<div>\r\n            <CustomTextField label=\"Search...\" onChange={props.onSearch} type=\"search\" />\r\n        </div>)\r\n    \r\n}\r\n\r\nexport default Search;","import React, {useState} from 'react';\r\nimport ListItems from \"./ListItems\";\r\nimport ToDoHeader from \"./ToDoHeader\";\r\nimport uniqueId from \"uniqid\";\r\nimport FilterButtons from './FilterButtons';\r\nimport Search from './Search';\r\n\r\nconst wrapperDivStyle = {\r\n    width: '60%',\r\n    margin: '0 auto',\r\n    padding: 0,\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    justifyContent: 'flex-start',\r\n    alignItems: 'center',\r\n    height: '100vh',\r\n}\r\n\r\nfunction Main() {\r\n\r\n    const [inputValue, setInputValue] = useState('');\r\n    const [isFilteredBy, setIsFilteredBy] = useState('');\r\n    const [searchKey, setSearchKey] = useState('');\r\n    const [toDoItems, setToDoItems] = useState([]);\r\n\r\n    const onBtnClick = () => {\r\n        addNewItem();\r\n    };\r\n\r\n    const addNewItem = () => {\r\n        const newTodosList = [...toDoItems]\r\n        if (inputValue) {\r\n            newTodosList.push({\r\n                done: false,\r\n                name: inputValue,\r\n                id: uniqueId()\r\n            });\r\n        }\r\n        setToDoItems(newTodosList);\r\n        setInputValue(\"\");\r\n    }\r\n\r\n    const onInputChange = (event) => setInputValue(event.target.value);\r\n\r\n    const onBtnRemove = (id) => {\r\n        \r\n        const arr = [...toDoItems];\r\n        arr.splice(arr.findIndex(el => el.id === id), 1)\r\n        setToDoItems(arr);\r\n    };\r\n\r\n    const onCheckboxChange = (id) => {\r\n        \r\n        const arr = [...toDoItems];\r\n        const currentToDo = arr.find((el) => el.id === id);\r\n        const currentToDoIndex = arr.indexOf(currentToDo);\r\n        arr.splice(currentToDoIndex, 1, {\r\n            ...currentToDo,\r\n            done: !currentToDo.done,\r\n        })\r\n        setToDoItems(arr);\r\n    };\r\n\r\n    const onAllBtnClick = () => setIsFilteredBy('all');\r\n\r\n    const onActiveBtnClick = () => setIsFilteredBy('active');\r\n\r\n    const onCompletedBtnClick = () => setIsFilteredBy('completed');\r\n\r\n    const onSearchBar = (event) => setSearchKey(event.target.value);\r\n\r\n    const afterSearch = () => setSearchKey('');\r\n\r\n    const filterToDoItems = () => {\r\n        if (isFilteredBy === 'active') {\r\n            if(searchKey){\r\n                return toDoItems.filter(el => !el.done && el.name.includes(searchKey));\r\n            } else {\r\n                return toDoItems.filter(el => !el.done);\r\n            }\r\n        } else if (isFilteredBy === 'completed') {\r\n            if(searchKey){\r\n                return toDoItems.filter(el => el.done && el.name.includes(searchKey));\r\n            } else {\r\n                return toDoItems.filter(el => el.done);\r\n            }\r\n        } else if(searchKey){\r\n            return toDoItems.filter(el => el.name.includes(searchKey));\r\n        } else {\r\n            return toDoItems;\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div style={wrapperDivStyle}>\r\n\r\n            <ToDoHeader inputValue={inputValue} onInputChange={onInputChange}\r\n                        onBtnClick={onBtnClick} onEnterPress={addNewItem} />\r\n            <Search onSearch={onSearchBar} onDelete={afterSearch} />\r\n            <ListItems toDoItems={filterToDoItems()} onBtnRemove={onBtnRemove} onCheckboxChange={onCheckboxChange}/>\r\n            <FilterButtons onAllBtnClick={onAllBtnClick} \r\n                        onActiveBtnClick={onActiveBtnClick} onCompletedBtnClick={onCompletedBtnClick}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Main;\r\n","import React from 'react';\r\nimport './App.css';\r\nimport Main from \"./components/Main\";\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    <Main />\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}